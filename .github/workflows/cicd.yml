name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]

jobs:
  test:
    name: Run Tests & Code Analysis
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          
      # Step 3: Cache pip dependencies for faster builds
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Step 4: Install required Python dependencies, testing, and security tools
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov bandit flake8 -r requirements.txt

      # Step 5: Run unit tests with coverage reporting
      - name: Run tests with coverage
        run: pytest --cov=app --cov-report=xml
        
      # Step 6: Run Bandit security scan for Python code vulnerabilities
      - name: Run security scan (Bandit)
        run: bandit -r .

      # Step 7: Run static code analysis with Flake8 (linting, PEP8 compliance)
      - name: Run static code analysis (Flake8)
        run: flake8 src --max-line-length=120 --statistics --ignore=E302

  docker:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: test   # Run only if test job is successful

    steps:
      # Step 1: Checkout repo
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Login to DockerHub using GitHub Secrets
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 3: Build and push Docker image to DockerHub
      - name: Build and Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/git-gist:latest
          
      # Step 4: Scan Docker image for vulnerabilities using Trivy
      - name: Security scan Docker image (Trivy)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/git-gist:latest
          format: 'table'
          exit-code: '0'   # Continue pipeline even if vulnerabilities are found
        
  update-newtag-in-helm-chart:
    runs-on: self-hosted
    needs: docker

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Update tag in Helm chart
      run: |
        sed -i 's/tag: .*/tag: "${{github.run_id}}"/' helm/git-gist-app-chart/values.yaml
        
    - name: Helm upgrade/install
      run: |
        helm upgrade --install git-gist-app ./git-gist-app-chart -n git-gist-ns -f ./git-gist-app-chart/values.yaml
        
    - name: Verify rollout status
      run: kubectl rollout status deployment/git-gist-deployment -n git-gist-ns